import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from bot.github_handler import clone_repo, analyze_repo
from bot.code_analysis import CodeAnalyzer
from config import Config

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

class CodeQualityBot:
    def __init__(self):
        self.analyzer = CodeAnalyzer(Config.MODEL_NAME, Config.RAG_DB_PATH)
        self.logger = logging.getLogger(__name__)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            await update.message.reply_text(
                "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞.\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/connect <URL-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è> - –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n"
                "/analyze - –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞\n"
                "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n\n"
                "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: 1 —á–∞—Å"
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")

    async def connect_repo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /connect"""
        try:
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
                return

            repo_url = context.args[0]
            user_id = update.effective_user.id
            repo_path = clone_repo(repo_url, Config.REPOS_ROOT, user_id)
            
            context.user_data["repo_path"] = repo_path
            await update.message.reply_text(
                f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω: {os.path.basename(repo_path)}"
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–ø–∞: {str(e)}")

    async def analyze_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        try:
            if "repo_path" not in context.user_data:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
                return

            await update.message.reply_text(
                "üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...\n"
                "‚è± –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 —á–∞—Å–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤\n"
                "‚úÖ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 1 —á–∞—Å
            report_path = await asyncio.wait_for(
                asyncio.get_event_loop().run_in_executor(
                    None,
                    analyze_repo,
                    context.user_data["repo_path"],
                    self.analyzer
                ),
                timeout=3600  # 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
            )

            await update.message.reply_document(
                document=open(report_path, "rb"),
                caption="üìä –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!",
                filename=os.path.basename(report_path)
            )

        except asyncio.TimeoutError:
            await update.message.reply_text(
                "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ (1 —á–∞—Å)\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—å—à–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
            )
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    async def stop_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        try:
            await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
            os._exit(0)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        bot = CodeQualityBot()
        application = Application.builder().token(Config.TELEGRAM_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = [
            CommandHandler("start", bot.start),
            CommandHandler("connect", bot.connect_repo),
            CommandHandler("analyze", bot.analyze_code),
            CommandHandler("stop", bot.stop_bot)
        ]
        
        for handler in handlers:
            application.add_handler(handler)

        application.run_polling(
            poll_interval=2.0,
            timeout=100,
            drop_pending_updates=True
        )
    except Exception as e:
        logging.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()